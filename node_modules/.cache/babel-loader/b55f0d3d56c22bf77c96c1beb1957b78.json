{"ast":null,"code":"var _jsxFileName = \"/home/lucascullen/GitHub/BitcoinBrisbane/bwx/src/components/form-inputs/Input.js\";\nimport React from \"react\";\nimport { useField } from \"formik\"; // import ErrorMessage from \"../ErrorMessage\";\n\nconst FormGroupWrap = ({\n  isWrapped,\n  children\n}) => isWrapped ? /*#__PURE__*/React.createElement(\"div\", {\n  className: \"form-group\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 15\n  }\n}, children) : /*#__PURE__*/React.createElement(React.Fragment, null, children);\n\nconst Input = ({\n  label,\n  onChange,\n  skinny,\n  ...props\n}) => {\n  let [field, meta, helpers] = useField(props);\n  if (onChange) field.onChange = e => onChange(e, helpers);\n  if (props.value) field.value = props.value;\n  return /*#__PURE__*/React.createElement(FormGroupWrap, {\n    isWrapped: !skinny,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 5\n    }\n  }, label && /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 17\n    }\n  }, label), /*#__PURE__*/React.createElement(\"input\", Object.assign({\n    className: \"form-control\"\n  }, props, field, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }\n  })));\n};\n\nexport default Input;","map":{"version":3,"sources":["/home/lucascullen/GitHub/BitcoinBrisbane/bwx/src/components/form-inputs/Input.js"],"names":["React","useField","FormGroupWrap","isWrapped","children","Input","label","onChange","skinny","props","field","meta","helpers","e","value"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,QAAzB,C,CACA;;AAEA,MAAMC,aAAa,GAAG,CAAC;AAAEC,EAAAA,SAAF;AAAaC,EAAAA;AAAb,CAAD,KACpBD,SAAS,gBAAG;AAAK,EAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA6BC,QAA7B,CAAH,gBAAkD,0CAAGA,QAAH,CAD7D;;AAGA,MAAMC,KAAK,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASC,EAAAA,QAAT;AAAmBC,EAAAA,MAAnB;AAA2B,KAAGC;AAA9B,CAAD,KAA2C;AACvD,MAAI,CAACC,KAAD,EAAQC,IAAR,EAAcC,OAAd,IAAyBX,QAAQ,CAACQ,KAAD,CAArC;AACA,MAAIF,QAAJ,EAAcG,KAAK,CAACH,QAAN,GAAiBM,CAAC,IAAIN,QAAQ,CAACM,CAAD,EAAID,OAAJ,CAA9B;AACd,MAAIH,KAAK,CAACK,KAAV,EAAiBJ,KAAK,CAACI,KAAN,GAAcL,KAAK,CAACK,KAApB;AAEjB,sBACE,oBAAC,aAAD;AAAe,IAAA,SAAS,EAAE,CAACN,MAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGF,KAAK,iBAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAQA,KAAR,CADZ,eAEE;AAAO,IAAA,SAAS,EAAC;AAAjB,KAAoCG,KAApC,EAA+CC,KAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAFF,CADF;AAOD,CAZD;;AAcA,eAAeL,KAAf","sourcesContent":["import React from \"react\";\nimport { useField } from \"formik\";\n// import ErrorMessage from \"../ErrorMessage\";\n\nconst FormGroupWrap = ({ isWrapped, children }) =>\n  isWrapped ? <div className=\"form-group\">{children}</div> : <>{children}</>;\n\nconst Input = ({ label, onChange, skinny, ...props }) => {\n  let [field, meta, helpers] = useField(props);\n  if (onChange) field.onChange = e => onChange(e, helpers);\n  if (props.value) field.value = props.value;\n\n  return (\n    <FormGroupWrap isWrapped={!skinny}>\n      {label && <label>{label}</label>}\n      <input className=\"form-control\" {...props} {...field} />\n      {/* <ErrorMessage error={meta.error} isHidden={!meta.touched} /> */}\n    </FormGroupWrap>\n  );\n};\n\nexport default Input;\n"]},"metadata":{},"sourceType":"module"}